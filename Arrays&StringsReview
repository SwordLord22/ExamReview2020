/*
 * Author: Sword Lord of the Lonely Peak
 * Date: 2020/05/20
 * Program: Strings and Array Review
 */
 
/***************************************************************************************************** 
 * Arrays:
 * => Primative datatype can only store one value at a time. It cannot store mutiple values!
 * => This is why we use an array! With an array, we can store n number of elements (more than 1 element) using one variable. 
 * => However, all the values that are stored in an array must of the same datatype. 
 * => Arrays only store homogenous data elements within it. 
 * => An array is an aggregated or derived datatype.
 * Declaration of array: 
 * => Prototype: datatype Identity [Size]; 
 * => Example: 
 *      int a[5]; 
 * => We can process arrays using index numbers. Index number starts from 0 to size-1.
 * => Example:
 *      int a[5]; //Size is 5! The index numbers for this array are 0 1 2 3 4
 * => Array variable is called internal pointer variable! It always holds the base address of the array. 
 * Local declarations:
 * => Local variables in the c language initializes with "garbage" values if you don't initialize it with at least one element. 
 * => Example:
 *      int a[5]; //Initializes with "garbage" values!
 *      int a[5] = {10,20,30,40,50}; //Initializes with the values given within the braces!
 *      int a[5] = {10,20}; //Initliazes with values of 10 and 20 in index 0 and 1, while the rest of the indexes (1-4) are filled with value of 0 or NULL. 
 * => All values in an array can be initialized directly!
 * Global declarations:
 * => A global variable is a vriable that is declared outside of all the functions in the program.  
 * => Example:
 *      int a[5]; //Initializes with 0s, because a global variable's default value is 0. 
 * Reading Array: 
 * => It is better to use iterators and loops to read an array.
 * => Example (segment of code): 
 *      for(i=0; i<5; i++)
 *      {
 *         scanf(%d", &arr[i]);
 *      }
 * Printing of Array:
 * => It is better to use iterators and loops to print an array.
 * => Example (segment of code):
 *      for(i=0; i<5; i++)
 *      {
 *        printf("%d", arr[i]);
 *      }
 * Examples of Array Programs:
 * 1) How to print array elements: 
 *    #include <stdio.h> 
 *    int main()
 *    {
 *      int arr[5]; int i = 0;
 *      for(i = 0; i<5; i++)  
 *      {
 *        printf("%d\n", arr[i]);
 *      }
 *     }
 * 2) How to find the sum of all array elements:
 *    #include <stdio.h>
 *    int main()
 *    {
 *      int arr[5] = {4,5,6,7,8};
 *      int i = 0, sum = 0;
 *      for(i = 0; i<5; i++)
 *      {
 *         sum+=arr[i]; 
 *      }
 *      printf("The sum of the all the elements in the array is: %d\n", sum);
 *    }
 * 3) How to find largest element in an array:
 *    #include <stdio.h>
 *    int main()
 *    {
 *      int arr[5] = {5,6,7,8,9};
 *      int i = 0, largest = 0;
 *      for(i = 0; i<5; i++)
 *      {
 *        if(largest < arr[i})
 *            largest = arr[i];
 *      }
 *      printf("The largest value in the array is: %d\n", largest); 
 *    }
 * 4) How to insert an element into an array: 
 *    #include <stdio.h>
 *    int main()
 *    {
 *      int key = 0; int loc = 0; int i = 0; int arr[50]; int n = 0; 
 *      printf("Enter size: ");
 *      scanf("%d", &n); 
 *      printf("Enter %d elements: ", n);
 *      for(i = 0; i<n; i++)
 *      {
 *        scanf("%d", arr[i]);
 *      }
 *      printf("Enter element to insert: "); 
 *      scanf("%d", &key);
 *      printf("Enter the location where you want to insert: ");     
 *      scanf("%d", &loc);
 *      for(i=n-1; i>=loc; i--)
 *      {
 *          //Shifts all values from (n-1), which is the last value to the location where the user wants to insert his value. 
 *          arr[i+1] = arr[i]; 
 *      }
 *      //Insert the value into the location specified by the user. 
 *      arr[loc] = key;
 *     }
 * 5) How to insert all the elements of one array into another: 
 *    #include <stdio.h>
 *    #define m 5
 *    #define n 2
 *    int main()
 *    {
 *      int i = 0; int loc = 0; int arr1[m] = {4,5,6,7,8}; int arr2[n] = {10,20};
 *      printf("Enter the location to insert: ");
 *      scanf("%d", &loc); 
 *      //For loop is used to shift all elements of the first array!
 *      for(i=(m-1); i>=loc; i++)
 *      {
 *        arr1[i+n] = arr1[i];
 *      }
 *      //For loop is used to insert all elements of the second array into the first array. 
 *      for(i=0; i<n; i++)
 *      {
 *        arr1[loc+i] = arr2[i]; 
 *      }
 *     }
 *****************************************************************************************************
 * STRINGS:  
 * => String is a one-dimensional character array.
 * => Each character occupies 1 byte in c language. 
 * Syntax:
 * => Prototype of array: datatype Identity[size]; 
 * => Prototype of string: char Identity[size]; 
 * => Example:
 *      char name[20]; //Store 19 characters. This is because the last character is a NULL character.
 *      char s1[5] = "Hari";
 *      char s1[4] = {'O', 'N', 'E'}; 
 * Processing the elements: 
 * => "%s" : format specifier for strings. It is used to read or write string elements. No need to use iterators. 
 * => Example: 
 *    #include <stdio.h>
 *    int main()
 *    {
 *      char name[20];
 *      printf("Enter your name: ");
 *      scanf("%s", name); // We dont need & operator. NULL will be automatically appended at the end of the characters. 
 *                         // ie. Hari\0. This is bacause it shows where the string ends, which is needed in printing the string. 
 *      printf("Your name is: %s", name); 
 *    }
 * String Functions:
 * => Include the library called string.h to access the string functions. 
 *   1) strstr()
 *   2) strcmp()
 *      +++Prototype: int strcmp(const char* s1, const* char* s2);
 *      +++Compares two strings to one another (ie. s1 and s2). 
 *      +++Returns values:
 *         Less than 0 if s1 < s2 
 *         Greater than 0 if s1 > s2
 *         Equal to 0 if s1 == s2 
 *   3) strlen()
 *      +++Prototype = size_t strlen(const char* str); 
 *      +++It will return a integer, which is the length of the given string. 
 *      +++It will not count the NULL character, which there at the end of the string. 
 *      +++It will always calculate the length of the string and NOT the length of the array. 
 *      +++Example: 
 *          #include <stdio.h>
 *          #include <string.h>
 *          int main()
 *          {
 *            char *str = "Hello World"; // char str[100] = "Hello World"; 
 *            printf("%d", strlen(str));
 *            return 0; 
 *          }
 *   4) strcpy()
 *      +++This function is also called string copy function. 
 *      +++Prototype: char* strcpy(char* destination, const char* source);
 *      +++strcpy is used to copy a string pointed by the source (including the NULL character) to the destination (character array).
 *      +++Example: 
 *         #include <stdio.h>
 *         #include <string.h>
 *         int main()
 *         {
 *           char str1[10] = "Hello";
 *           char str2[10];
 *           char str3[10];
 *           strcpy(str3, strcpy(str2, str1)); 
 *           //printf("%s\n", strcpy(str2, str1)); 
 *           printf("%s %s", str2, str3); 
 *           return 0; 
 *         }
 *      +++strcpy returns the pointer to the first character of the string which is copied to the destination.
 *         Hence, when we use %s, then the whole string will be printed on the screen.  
 *      +++CAUTION! 
 *         In the call to strcpy(str1,str2), there is no way the strcpy will check whether the string pointed by str2 will fit in str1.
 *         If the length of the string pointed by str2 is greater than the length of the character array str1 then it will have undefined behaviours.
 *         This why to avoid this, we use strncpy function!
 *      +++Prototype of strncpy: char* strncpy(destination, source, sizeof(destination)); 
 *      +++Example of strncpy: 
 *          #include <stdio.h> 
 *          #include <string.h>
 *          int main()
 *          {
 *            char str1[6] = "Hello";
 *            char str2[4];
 *            strncpy(str2, str1, sizeof(str2)); //NULL character is not copied to destination, which is str2. 
 *            str2[sizeof(str2) - 1] = '\0'; //Need to add NULL character at the end of the string. 
 *            printf("%s", str2);
 *            return 0; 
 *          }
 *      +++strncpy will leave the string str2(destination) without a termination NULL character. 
           If the size of str1 is equal to or greater than the size of str2(destination). 
 ****************************************************************************************************/
 //Example Program 1 ====> Find all the permutations of a string:
 //Code:
      #include <stdio.h>
      #include <string.h> 
      
      void swap(char *c1, char *c2)
      {
        char temp;
        temp=*c1;
        *c1=*c2;
        *c2=temp; 
      }
 
      void perm(char *s, int a, int n)
      {
        int j;
        if(a==n)
          printf("%s\n", s); 
        else
        {
         for(j=a;j<=n;j++)
         {
          swap((s+a),(s+j)); 
          perm(s,a+1,n);
          swap((s+a),(s+j));
         }
        }
      }
      
      int main()
      {
        char str[10];
        int n; 
        printf("Enter the string: ");
        scanf("%s", str); 
        n = strlen(str);
        printf("All possible permutations:\n");
        perm(str,0,n-1);
      }
